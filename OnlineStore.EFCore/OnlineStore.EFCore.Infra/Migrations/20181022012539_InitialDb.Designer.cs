// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineStore.EFCore.Infra;

namespace OnlineStore.EFCore.Infra.Migrations
{
    [DbContext(typeof(OnlineStoreDbContext))]
    [Migration("20181022012539_InitialDb")]
    partial class InitialDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OnlineStore.EFCore.Domain.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasMaxLength(60);

                    b.Property<byte[]>("Picture");

                    b.HasKey("CategoryID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("OnlineStore.EFCore.Domain.Models.Customer", b =>
                {
                    b.Property<Guid>("CustomerID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("ContactTitle")
                        .HasMaxLength(60);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("Fax")
                        .HasMaxLength(15);

                    b.Property<string>("Phone")
                        .HasMaxLength(15);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(15);

                    b.Property<string>("Region")
                        .HasMaxLength(100);

                    b.HasKey("CustomerID");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("OnlineStore.EFCore.Domain.Models.Department", b =>
                {
                    b.Property<Guid>("DepartmentID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.HasKey("DepartmentID");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("OnlineStore.EFCore.Domain.Models.Driver", b =>
                {
                    b.Property<Guid>("DriversID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<string>("LastName");

                    b.Property<string>("LicenseType");

                    b.Property<string>("MiddleName");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Religion");

                    b.Property<bool>("isActive");

                    b.HasKey("DriversID");

                    b.ToTable("Driver");
                });

            modelBuilder.Entity("OnlineStore.EFCore.Domain.Models.Employee", b =>
                {
                    b.Property<Guid>("EmployeeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid?>("DepartmentID");

                    b.Property<string>("Extension")
                        .HasMaxLength(15);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<DateTime?>("HireDate")
                        .IsRequired();

                    b.Property<string>("HomePhone")
                        .HasMaxLength(15);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("Notes")
                        .HasMaxLength(1000);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(15);

                    b.Property<string>("Region")
                        .HasMaxLength(100);

                    b.Property<Guid>("ReportsTo");

                    b.Property<string>("Title")
                        .HasMaxLength(60);

                    b.Property<string>("TitleOfCourtesy")
                        .HasMaxLength(60);

                    b.HasKey("EmployeeID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("OnlineStore.EFCore.Domain.Models.OrderDetail", b =>
                {
                    b.Property<Guid>("OrderDetailID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Discount");

                    b.Property<int>("OrderDetailLineID");

                    b.Property<Guid>("OrderID");

                    b.Property<Guid>("ProductID");

                    b.Property<decimal>("Quantity");

                    b.Property<decimal>("UnitPrice");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("Order Details");
                });

            modelBuilder.Entity("OnlineStore.EFCore.Domain.Models.Orders", b =>
                {
                    b.Property<Guid>("OrderID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Country")
                        .HasMaxLength(15);

                    b.Property<Guid>("CustomerID");

                    b.Property<string>("CustomerName");

                    b.Property<Guid>("EmployeeID");

                    b.Property<decimal>("Freight");

                    b.Property<DateTime>("OrderDate");

                    b.Property<int>("PostalCode");

                    b.Property<DateTime>("RequiredDate");

                    b.Property<string>("ShipAddress")
                        .HasMaxLength(60);

                    b.Property<string>("ShipCity")
                        .HasMaxLength(60);

                    b.Property<DateTime>("ShipDate");

                    b.Property<string>("ShipName");

                    b.Property<string>("ShipRegion")
                        .HasMaxLength(60);

                    b.Property<Guid?>("ShipViaShipperID");

                    b.Property<Guid>("ShipperID");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ShipViaShipperID");

                    b.HasIndex("ShipperID");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("OnlineStore.EFCore.Domain.Models.Person", b =>
                {
                    b.Property<Guid>("PersonID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<string>("Barangay");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("Country")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("Gender");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<int>("Latitude");

                    b.Property<int>("Longtitude");

                    b.Property<string>("MiddleName");

                    b.Property<string>("Nationality")
                        .IsRequired();

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.Property<byte>("Photo");

                    b.Property<int>("PostalCode");

                    b.Property<string>("Region")
                        .IsRequired();

                    b.Property<string>("RelationshipStatus")
                        .IsRequired();

                    b.Property<string>("Religion");

                    b.Property<string>("Street")
                        .IsRequired();

                    b.Property<string>("city")
                        .IsRequired();

                    b.HasKey("PersonID");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("OnlineStore.EFCore.Domain.Models.Product", b =>
                {
                    b.Property<Guid>("ProductID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CategoryID");

                    b.Property<bool>("Discontinued");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100);

                    b.Property<decimal>("QuantityPerUnit");

                    b.Property<string>("ReorderLevel");

                    b.Property<Guid>("SupplierID");

                    b.Property<decimal>("UnitPrice");

                    b.Property<decimal>("UnitStock");

                    b.Property<decimal>("UnitsOnOrder");

                    b.HasKey("ProductID");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("OnlineStore.EFCore.Domain.Models.Shipper", b =>
                {
                    b.Property<Guid>("ShipperID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyName")
                        .HasMaxLength(60);

                    b.Property<string>("Phone")
                        .HasMaxLength(15);

                    b.HasKey("ShipperID");

                    b.ToTable("Shipper");
                });

            modelBuilder.Entity("OnlineStore.EFCore.Domain.Models.Supplier", b =>
                {
                    b.Property<Guid>("SupplierID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(60);

                    b.Property<string>("City")
                        .HasMaxLength(60);

                    b.Property<string>("CompanyName")
                        .HasMaxLength(60);

                    b.Property<string>("ContactName")
                        .HasMaxLength(60);

                    b.Property<string>("ContactTitle")
                        .HasMaxLength(60);

                    b.Property<string>("Country");

                    b.Property<string>("Fax")
                        .HasMaxLength(15);

                    b.Property<string>("HomePage")
                        .HasMaxLength(60);

                    b.Property<int>("Phone");

                    b.Property<int>("PostalCode");

                    b.Property<string>("Region")
                        .HasMaxLength(100);

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.HasKey("SupplierID");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("OnlineStore.EFCore.Domain.Models.Warehouse", b =>
                {
                    b.Property<Guid>("WarehouseID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("IsActiveItem");

                    b.Property<string>("ItemNumber");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PostalCode");

                    b.Property<string>("Region");

                    b.Property<string>("Street");

                    b.Property<string>("WarehouseName");

                    b.HasKey("WarehouseID");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("OnlineStore.EFCore.Domain.Models.Employee", b =>
                {
                    b.HasOne("OnlineStore.EFCore.Domain.Models.Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentID");
                });

            modelBuilder.Entity("OnlineStore.EFCore.Domain.Models.OrderDetail", b =>
                {
                    b.HasOne("OnlineStore.EFCore.Domain.Models.Orders", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineStore.EFCore.Domain.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineStore.EFCore.Domain.Models.Orders", b =>
                {
                    b.HasOne("OnlineStore.EFCore.Domain.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineStore.EFCore.Domain.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineStore.EFCore.Domain.Models.Shipper", "ShipVia")
                        .WithMany()
                        .HasForeignKey("ShipViaShipperID");

                    b.HasOne("OnlineStore.EFCore.Domain.Models.Shipper", "Shipper")
                        .WithMany()
                        .HasForeignKey("ShipperID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
